version: 0.2

env:
  variables:
    IMAGE_TAG: "latest"
    QUBECONFIG: "/root/kubeconfig.demoeks-cluster.yaml"
phases:
  install:
    commands:
      - echo entering install stage
      - nohup /usr/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay&
  pre_build:
    commands:
      - echo Logging in to Amazon ECRâ€¦
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo $QUBECONFIG 
      - echo $AWS_ACCOUNT_ID
      - echo $AWS_DEFAULT_REGION
      - echo $IMAGE_REPO_NAME
      - echo $IMAGE_TAG
  build:
    commands:
##      - docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - kubectl run demo-app --image= $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG --port=8080 --kubeconfig=$QUBECONFIG
      - kubectl run demo-app --image=337226440425.dkr.ecr.us-west-2.amazonaws.com/rkn_container1:latest --port=8080 --kubeconfig=$QUBECONFIG
      - kubectl expose deployment demo-app --type=LoadBalancer --port=8080 --target-port=8080 --kubeconfig=$QUBECONFIG 
      - kubectl get svc
      - kubectl describe services demo-app
      - kubectl get pods
      - kubectl get nodes

      
